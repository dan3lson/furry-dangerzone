var targetWord = JSON.parse("<%= j @target_word.to_json.html_safe %>");
var jeopWords = JSON.parse("<%= j @words.to_json.html_safe %>");
var rounds = JSON.parse("<%= j @jeopardy.to_json.html_safe %>").game;
var nonNullRounds = rounds.filter(function(round) {
    return round.correct_ans != null;
});
const $scoreboardPartial = $("<%= j render(partial: 'games/scoreboard') %>");
const $lineroTablePartial = $("<%= j render(partial: 'games/jeopardy/linero_table', locals: { rows: @rows }) %>");
const $headerPartial = $("<%= j render(partial: 'games/jeopardy/header') %>");
const $buttonsPartial = $("<%= j render(partial: 'games/jeopardy/buttons', locals: { words: @words }) %>");
var $jeopardyDiv = createElem("div", null, "jeopardy-div");
var $selectedCell;
var lineroCellNumID;
var round;
var question;
$(".container").empty().append($jeopardyDiv);
$jeopardyDiv.append(
							$scoreboardPartial,
							$lineroTablePartial,
							$headerPartial,
							$buttonsPartial
						).hide()
						.fadeIn("slow");
var $btns = $(".jeop-btn");
var validCells = "#linero-table td:not(.exclude)";
var $scoreboardTimer = $(".scoreboard-timer");
var scoreboardTimerID = startCountup($scoreboardTimer, 0);
var totalLinero = 0;
var category;
updateProgress(10);

$.each(jeopWords, function() {
	var word = this;
	var numQues = nonNullRounds.filter(function(round) {
		return round.correct_ans.name == word.name;
	}).length;
	word.numQues = numQues;
	word.numCorrect = 0;
	word.numIncorrect = 0;
});

$("#jeopardy-div").on("click", validCells, function() {
	$selectedCell = $(this);
	activtate(validCells, $selectedCell);
	lineroCellNumID = $(this).data("ques-num");
	question = findQues(rounds, lineroCellNumID);
	updateHeader(question.ques);
	enableButtons();
	timeGameStarted = getDate();
	category = question.category;
});

$("#jeopardy-div").on("click", ".jeop-btn", function() {
	var questionIsDisplayed = $jeopardyDiv.find("h4").text().length;

	if (questionIsDisplayed) {
		$selectedBtn = $(this);
		$selectedBtnName = $selectedBtn.find("span:first").text();
		updateHeader("");
		deactivate($selectedCell);
		removeClick($selectedCell);
		updateProgress();
		disableButtons();
		question.selected_ans = $selectedBtnName;
		var word = jeopWords.filter(function(word) {
			return word.name == $selectedBtnName;
		})[0];

		if (question.selected_ans == question.correct_ans.name) {
			word.numCorrect += 1;
			markResult(question, true);
			addThumbsUp($selectedBtn);
			updateGameStatIfIsUserWord(
				timeGameStarted,
				$selectedBtn,
				question.linero,
				true
			);
		} else {
			word.numIncorrect += 1;
			markResult(question, false);
			addThumbsDown($selectedBtn);
			updateGameStatIfIsUserWord(
				timeGameStarted,
				$selectedBtn,
				question.linero,
				false
			);
		}

		if (noMoreQuestions($selectedBtnName)) {
			var wordID = $selectedBtn.data("word-id");

			if (wordGetsPromoted($selectedBtnName)) {
				promoteToFreestyle(wordID);
			} else {
				demoteToFundamentals(wordID);
			}
		}

		if (gameIsOver()) {
			startReviewActivity();
		}
	}
});

function startReviewActivity() {
	clearTimeout(scoreboardTimerID);
	var getsPromoted = wordGetsPromoted(targetWord.name);
	const $reviewPartial = $("<%= j render(partial: 'games/review', locals: { game: 'Jeopardy', word_name: @target_word.name }) %>");

	if (getsPromoted) {
		var $nextGamePartial = $("<%= j render(partial: 'games/next_game', locals: { next_game: 'Freestyle', color: 'success', seconds: '15' }) %>");
	} else {
		var $nextGamePartial = $("<%= j render(partial: 'games/next_game', locals: { next_game: 'Fundamentals', color: 'danger', seconds: '15' }) %>");
	}

	$jeopardyDiv.empty().append($reviewPartial, $nextGamePartial);
	var $gameCountdown = $(".game-countdown");
	showResults();
	startCountdown($gameCountdown, 15, getsPromoted);
};

/***********************
		HELPER FUNCTIONS
************************/

function updateGameStatIfIsUserWord(timeStarted, $btn, linero, result) {
	if (isUserWord($btn)) {
		var data = {
			"category": category,
			"linero": linero,
			"result": result
		};
		updateGameStat("jeopardy", timeStarted, data);
	}
}

function isUserWord($btn) {
	return $btn.data("has-word");
}

function showResults() {
	var actualRounds = rounds.filter(function(round) {
		return round.ques != null;
	});
	var $userWordBtns = $btns.filter(function() {
		return isUserWord($(this));
	});

	$.each($userWordBtns, function() {
		var $btn = $(this);
		var $btnName = $btn.text().trim();
		$jeopardyDiv.append(createMotionCard($btn, wordGetsPromoted($btnName)));
	});

	$.each(actualRounds, function() {
		$jeopardyDiv.append(createResultCard(this));
	});
}

function noMoreQuestions($btnName) {
	var word = jeopWords.filter(function(word) {
		return word.name == $btnName;
	})[0];
	var numAnswered = word.numCorrect + word.numIncorrect;
	return word.numQues == numAnswered;
}

function wordGetsPromoted($btnName) {
	var word = jeopWords.filter(function(word) {
		return word.name == $btnName;
	})[0];
	var percentageCorrect = Math.floor((word.numCorrect / word.numQues) * 100);

	switch (word.numQues) {
		case 1:
			return percentageCorrect == 100;
			break;
		case 2:
			return percentageCorrect == 100;
			break;
		case 3:
			return percentageCorrect > 65;
			break;
		case 4:
			return percentageCorrect >= 75;
			break;
		case 5:
			return percentageCorrect >= 80;
			break;
		default: false;
	}
}

function promoteToFreestyle(wordID) {
	var data = { "word_id": wordID };
	makeAjaxCall("PATCH", "/jeopardy_game", data);
};

function demoteToFundamentals(wordID) {
	var data = { "word_id": wordID };
	makeAjaxCall("DELETE", "/jeopardy_game", data);
};

function updateGameStat(route, timeStarted, uniqData) {
	uniqData = uniqData || null;
	var url = "/game_stat/" + route;
	var data = {
		"word_id": targetWord.id,
		"time_started": timeStarted,
		"time_ended": getDate(),
		"uniq_data": uniqData
	}
	makeAjaxCall("POST", url, data);
}

function makeAjaxCall(type, url, data) {
	$.ajax({
		type: type,
		url: url,
		dataType: "json",
		data: data
	}).done(logResponse);
}

function logResponse(response) {
	console.log(response);
}

function markResult(question, result) {
	question.answered_correctly = result;
}

function gameIsOver() {
	return getCounter() == 20;
}

function addThumbsUp($btn) {
	markBtn($btn, "success", "up", "success");
}

function addThumbsDown($btn) {
	markBtn($btn, "danger", "down", "danger");
}

function markBtn($btn, textColor, finger, btnColor) {
	var $finger = createElem("i", "fa fa-thumbs-o-" + finger);
	$btn.append($finger);
	$btn.removeClass("btn-outline-primary").addClass("btn-" + btnColor);

	setTimeout(function() {
		$finger.remove();
		$btn.removeClass("btn-" + btnColor).addClass("btn-outline-primary");
	}, 750);
}

function disableButtons() {
	updateBtnProp($btns, true);
}

function enableButtons() {
	updateBtnProp($btns, false);
	updateBtnProp($(".btn.btn-secondary"), true);
}

function updateBtnProp($btn_selector, boolean) {
	$btn_selector.prop("disabled", boolean);
}

function updateProgress() {
	var $progressBar = $(".progress-bar");
	var value = Math.floor((getCounter() / 20) * 100);
	$progressBar.attr("aria-valuenow", value)
							.attr("style", "width: " + value + "%;");
};

function getCounter() {
	return $jeopardyDiv.find(".exclude").length;
}

function removeClick($selectedCell) {
	$selectedCell.removeClass("pointer").addClass("exclude text-muted");
}

function activtate(validCells, $selectedCell) {
	$(validCells).removeClass("text-primary mark");
	$selectedCell.addClass("text-primary mark");
}

function deactivate($selectedCell) {
	$selectedCell.removeClass("text-primary mark");
}

function findQues(questions, num) {
	return $(questions).filter(function() { return this.ques_num == num })[0];
}

function updateHeader(string) {
	$jeopardyDiv.find("h4").html(string);
}

function createMotionCard($btn, promoted) {
	var $card = createElem("div", "card mb-3");
	var $cardBlock = createElem("div", "card-body");
	$card.append($cardBlock);
	var word = "<mark>" + $btn.text() + "</mark>";

	if (promoted) {
		$cardBlock.append(
			word + " gets promoted to the Freestyle activities!"
		);
	} else {
		$cardBlock.append(
			word + " gets demoted to the Fundamentals game."
		);
	}

	return $card;
}

function createResultCard(round) {
	var $card = createElem("div", "card mb-3");
	var $cardBlock = createElem("div", "card-body");
	var $cardTitle = createElem("h4", "card-title");
	var correctString = "Correct answer: " + round.correct_ans.name;
	var urAnswerString = "Your Answer: " + round.selected_ans;
	var questionTypeString = "Question Type: " + round.category;

	if (round.answered_correctly) {
		var lineroString = "Linero Earned: " + round.linero;
		var $icon = createElem("div", "float-right")
								.append(createFontAweIcon("check fa-2x text-success"));
		$card.addClass("card-outline-success");
	} else {
		var lineroString = "Linero Lost: " + round.linero;
		var $icon = createElem("div", "float-right")
								.append(createFontAweIcon("close fa-2x text-danger"));
		$card.addClass("card-outline-danger");
	}
	$card.append($cardBlock);
	$cardBlock.append($cardTitle);
	$cardTitle.append($icon);
	$cardTitle.append(round.ques_num + 1 + ") ");
	$cardTitle.append(round.ques);
	$cardBlock.append(questionTypeString);
	$cardBlock.append(createElem("br"));
	$cardBlock.append(correctString);
	$cardBlock.append(createElem("br"));
	$cardBlock.append(urAnswerString);
	$cardBlock.append(createElem("br"));
	$cardBlock.append(lineroString);
	return $card;
}

function createFontAweIcon(_class) {
	return createElem("i", "fa fa-" + _class);
}

function createElem(elem, elemClass, elemID) {
	_class = elemClass || null;
	_id = elemID || null;
	return $("<" + elem + ">", { class: _class, id: _id });
}

function arrowSuccess() {
	return $(".fa-arrow-up.text-success");
}

function arrowDanger() {
	return $(".fa-arrow-down.text-danger");
}

function startCountup($section, seconds) {
	return setInterval(function() {
		seconds++;
		$section.html(seconds);
	}, 1000);
}

function startCountdown($selector, seconds, getsPromoted) {
	var countdownID = setInterval(function() {
		seconds--;
		$selector.html(seconds);

		if (seconds == 0) {
			clearInterval(countdownID);

			if (getsPromoted) {
				var url = "/freestyle?word_id=" + targetWord.id + "&game=9";
			} else {
				var url = "/fundamentals?word_id=" + targetWord.id;
			}

			$.getScript(url);
		}
	}, 1000);
}

function getDate() {
	return new Date();
}

function shuffleArray(array) {
	var m = array.length, t, i;

	while (m) {
		i = Math.floor(Math.random() * m--);
		t = array[m];
		array[m] = array[i];
		array[i] = t;
	}

	return array;
};

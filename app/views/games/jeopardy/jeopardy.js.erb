// Get examples from WordAPI
// Create and execute rake task for syllables
// Complete pseudocode below
	// If cell is excluded, respective question mark(s) should also be excluded
	// Figure out the rules for a word to advance to Freestyle

var rounds = JSON.parse("<%= j @jeopardy.to_json.html_safe %>").game;
const $directionsPartial = $("<%= j render(partial: 'games/jeopardy/directions') %>");
const $lineroTablePartial = $("<%= j render(partial: 'games/jeopardy/linero_table', locals: { rows: @rows }) %>");
const $headerPartial = $("<%= j render(partial: 'games/jeopardy/header') %>");
const $buttonsPartial = $("<%= j render(partial: 'games/jeopardy/buttons', locals: { names: @word_names }) %>");
var $jeopardyDiv = createElem("div", null, "#jeopardy-div");
var lineroCell;
var lineroCellNumID;
var amount;
var round;
var linero = 0;
var question;
var quesCounter = 0;
var $timeGameStarted;
$(".container").empty()
							 .append($jeopardyDiv);
$jeopardyDiv.append(
							$directionsPartial,
							$lineroTablePartial,
							$headerPartial,
							$buttonsPartial
						).hide()
						.fadeIn("slow");
var $btns = $(".jeop-btn");
var validCells = "#linero-table td:not(.exclude)";

$(".container").on("click", validCells, function() {
	$selectedCell = $(this);
	makeActive(validCells, $selectedCell);
	lineroCellNumID = $(this).data("ques-num");
	question = findQues(rounds, lineroCellNumID);
	updateHeader(question.ques);
	$btns.prop("disabled", false);
});

$(".container").on("click", ".jeop-btn", function() {
	// Check if the next two are already available - I'd assume they are :)
	lineroCellNumID = $("#linero-table td.text-primary").data("ques-num");
	question = findQues(rounds, lineroCellNumID);
	var questionIsDisplayed = $jeopardyDiv.find("h3").text().length;

	if (questionIsDisplayed) {
		$selectedAns = $(this);
		$selectedAnsText = $selectedAns.text();
		$timeGameStarted = $timeGameStarted || new Date();
		updateHeader("");
		makeInactive(validCells);
		$btns.prop("disabled", true);
		// Make the lineroCell "disabled" by with lightgray css text
		// display the increased counter in the top right corner
		// Find the rounds[counter] object and update selected_ans to selectedAnsText
		// Create reviewObjects array
			// Instantiate new object called result
				// Give it a property of round = rounds[counter]
		// Check if answer is correct
			// If answerCorrect
				// Give it a new property of answerCorrectly = true
				// Add a green thumbs up to the button's first available question icon
				// Update the linero total
					amount = parseInt($(this).text());
					linero += amount;
				// Check if game over
					// If true, clear table and buttons and show a review
					// !!! To be pseudo-coded! !!!
			// Else
				// Give it a new property of answerCorrectly = false
				// Add a red thumbs up to the button's first available question icon
				// Check if game over
					// If true, clear table and buttons and show a review
	}
});

function makeActive(validCells, $selectedCell) {
	$(validCells).removeClass("text-primary");
	$selectedCell.addClass("text-primary");
}

function findQues(questions, num) {
	return $(questions).filter(function() { return this.ques_num == num })[0];
}

function updateHeader(string) {
	$jeopardyDiv.find("h3").html(string);
}

function createElem(elem, elemClass, elemID) {
	_class = elemClass || null;
	_id = elemID || null;
	return $("<" + elem + ">", { class: _class, id: _id });
}

function shuffleArray(array) {
	var m = array.length, t, i;

	while (m) {
		i = Math.floor(Math.random() * m--);
		t = array[m];
		array[m] = array[i];
		array[i] = t;
	}

	return array;
};

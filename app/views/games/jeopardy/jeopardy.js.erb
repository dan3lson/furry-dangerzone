// Get examples from WordAPI
// Complete pseudocode below
	// If cell is excluded, respective question mark(s) should also be excluded
	// Figure out the rules for a word to advance to Freestyle

var rounds = JSON.parse("<%= j @jeopardy.to_json.html_safe %>").game;
const $directionsPartial = $("<%= j render(partial: 'games/jeopardy/directions') %>");
const $lineroTablePartial = $("<%= j render(partial: 'games/jeopardy/linero_table', locals: { rows: @rows }) %>");
const $headerPartial = $("<%= j render(partial: 'games/jeopardy/header') %>");
const $buttonsPartial = $("<%= j render(partial: 'games/jeopardy/buttons', locals: { names: @word_names }) %>");
var $jeopardyDiv = createElem("div", null, "#jeopardy-div");
var $selectedCell;
var lineroCellNumID;
var round;
var totalLineroEarned = 0;
var question;
var quesCounter = 0;
var $timeGameStarted;
$(".container").empty()
							 .append($jeopardyDiv);
$jeopardyDiv.append(
							$directionsPartial,
							$lineroTablePartial,
							$headerPartial,
							$buttonsPartial
						).hide()
						.fadeIn("slow");
var $btns = $(".jeop-btn");
var validCells = "#linero-table td:not(.exclude)";
updateCounter();

$(".container").on("click", validCells, function() {
	$selectedCell = $(this);
	activtate(validCells, $selectedCell);
	lineroCellNumID = $(this).data("ques-num");
	question = findQues(rounds, lineroCellNumID);
	updateHeader(question.ques);
	enableButtons();
});

$(".container").on("click", ".jeop-btn", function() {
	var questionIsDisplayed = $jeopardyDiv.find("h4").text().length;

	if (questionIsDisplayed) {
		$selectedBtn = $(this);
		$selectedBtnText = $selectedBtn.find("span:first").text();
		$timeGameStarted = $timeGameStarted || new Date();
		updateHeader("");
		deactivate($selectedCell);
		removeClick($selectedCell);
		updateCounter();
		disableButtons();
		question.selected_ans = $selectedBtnText;

		if (question.selected_ans == question.correct_ans.name) {
			markResult(question, true);
			addThumbsUp($selectedBtn);
			totalLineroEarned += parseInt(question.linero);
		} else {
			markResult(question, false);
			addThumbsDown($selectedBtn);
			totalLineroEarned -= parseInt(question.linero);
		}

		if (hasNoMoreAttempts($selectedBtn)) {
			updateBtnProp($selectedBtn);
			$selectedBtn.removeClass("btn-outline-primary").addClass("btn-secondary");
		}

		if (gameIsOver()) {
			disableButtons();
			$jeopardyDiv.empty()
									.html("Finished! Your added Linero is " + totalLineroEarned);
			// Display results in cards similar to Fundamentals MeanAlt and ExNonEx
				// activities
		}
	}
});

function hasNoMoreAttempts($btn) {
	return !($btn.find("span .fa-question-circle-o").length);
}

function markResult(question, result) {
	question.answered_correctly = result;
}

function gameIsOver() {
	return getCounter() == 20;
}

function addThumbsUp($btn) {
	markBtn($btn, "success", "up");
}

function addThumbsDown($btn) {
	markBtn($btn, "danger", "down");
}

function markBtn($btn, textColor, finger) {
	$btn.find("span .fa-question-circle-o.text-muted:first")
			.removeClass("fa-question-circle-o")
			.addClass("text-" + textColor + " fa-thumbs-o-" + finger);

}

function disableButtons() {
	updateBtnProp($btns, true);
}

function enableButtons() {
	updateBtnProp($btns, false);
	updateBtnProp($(".btn.btn-secondary"), true);
}

function updateBtnProp($btn_selector, boolean) {
	$btn_selector.prop("disabled", boolean);
}

function updateCounter() {
	$jeopardyDiv.find(".float-right")
							.text(getCounter() + "/20");
}

function getCounter() {
	return $jeopardyDiv.find(".exclude").length;
}

function removeClick($selectedCell) {
	$selectedCell.removeClass("pointer").addClass("exclude text-muted");
}

function activtate(validCells, $selectedCell) {
	$(validCells).removeClass("text-primary");
	$selectedCell.addClass("text-primary");
}

function deactivate($selectedCell) {
	$selectedCell.removeClass("text-primary");
}

function findQues(questions, num) {
	return $(questions).filter(function() { return this.ques_num == num })[0];
}

function updateHeader(string) {
	$jeopardyDiv.find("h4").html(string);
}

function createElem(elem, elemClass, elemID) {
	_class = elemClass || null;
	_id = elemID || null;
	return $("<" + elem + ">", { class: _class, id: _id });
}

function shuffleArray(array) {
	var m = array.length, t, i;

	while (m) {
		i = Math.floor(Math.random() * m--);
		t = array[m];
		array[m] = array[i];
		array[i] = t;
	}

	return array;
};

const $scoreboardPartial = $("<%= j render(partial: 'games/scoreboard') %>");
const $headerPartial = $("<%= j render(partial: 'games/fundamentals/header', locals: { target_word: @target_word }) %>");
const $directionsPartial = $("<%= j render(partial: 'games/directions', locals: { directions: '' }) %>");
var targetWord = JSON.parse("<%= j @target_word.to_json.html_safe %>");
var availableGames = JSON.parse("<%= j @available_games.to_json.html_safe %>");
var currentGame = parseInt("<%= @current_game %>");
var gameToPlay = parseInt("<%= @game_to_play %>");
var $activityDiv = createElem("div", null, "activity-div");
$(".container").empty()
							 .append(
								 $scoreboardPartial,
								 $headerPartial,
								 $directionsPartial,
								 $activityDiv
							 ).hide()
							 .fadeIn("slow")
							 .css("margin-bottom", "5rem");
var $points = $(".scoreboard-points");
var $scoreboardTimer = $(".scoreboard-timer");
var timerID = startCountup($scoreboardTimer, 0);
var $regex = /^[a-zA-Z0-9 .';,?!-:]+$/;
var newPointsTotal = 0;
var timeStarted;
updateProgress(10);

if (gameToPlay == 9) {
	if (availableGames.sent_stems) {
		startSentenceStemActivity();
	} else {
		updateUserWordGamesCompleted(9);
		updateProgress(25);
		startWordRelationshipActivity();
	}
} else if (gameToPlay == 10) {
	startWordRelationshipActivity();
} else if (gameToPlay == 11) {
	startLeksiTaleActivity();
} else if (gameToPlay == 12) {
	if (availableGames.describe_me) {
		startDescribeMeActivity();
	} else {
		updateUserWordGamesCompleted(12);
		updateProgress(100);
		startReviewActivity();
	}
} else if (gameToPlay > 12) {
	updateProgress(65);
	startInMyLifeActivity();
}

$(".container").on("click", ".continue-btn", function() {
	var $btn = $(this);

	if ($btn.hasClass("start-word-relationship-activity")) {
		updateUserWordGamesCompleted(9);
		updateProgress(25);
		addPoints(750);
		flashPointsUpdate(getArrowSuccess());
		saveSentStemResponse(timeStarted);
		emptyActivityDiv();
		startWordRelationshipActivity();
	} else if ($btn.hasClass("start-leksi-tale-activity")) {
		debugger;
		saveWordRelResponse(timeStarted);
		updateUserWordGamesCompleted(10);
		updateProgress(50);
		addPoints(1330);
		flashPointsUpdate(getArrowSuccess());
		emptyActivityDiv();
		startLeksiTaleActivity();
	} else if ($btn.hasClass("start-describe-me-activity")) {
		flashPointsUpdate(getArrowSuccess());
		saveLeksiTaleResponse(timeStarted);
		emptyActivityDiv();

		if (availableGames.describe_me) {
			updateUserWordGamesCompleted(11);
			addPoints(1690);
			updateProgress(75);
			startDescribeMeActivity();
		} else {
			updateUserWordGamesCompleted(12);
			addPoints(2380);
			updateProgress(100);
			startReviewActivity();
		}
	} else if ($btn.hasClass("start-review-activity")) {
		updateUserWordGamesCompleted(12);
		updateProgress(100);
		addPoints(2360);
		flashPointsUpdate(getArrowSuccess());
		saveDescMeResponse(timeStarted);
		emptyActivityDiv();
		startReviewActivity();
	} else if ($btn.hasClass("start-review-in-my-life-activity")) {
		updateUserWordGamesCompleted(currentGame);
		updateProgress(100);
		addPoints(4310);
		flashPointsUpdate(getArrowSuccess());
		saveInMyLifeResponse(timeStarted);
		emptyActivityDiv();
		startReviewActivity();
	}

	$btn.parent().remove();
});

/***********************
	 ACTIVITY FUNCTIONS
************************/

function startSentenceStemActivity() {
	beginTimeStarted();
	const $sentStemsPartial = $("<%= j render(partial: 'games/freestyle/sent_stems', locals: { sent_stems: @sent_stems }) %>");
	$activityDiv.append($sentStemsPartial);
	giveDirections("Complete the sentences below.");
	const $textarea = $("#" + targetWord.id).focus();

	$textarea.on("input", function() {
		var value = $(this).val().trim();

		if (value.length > 0 && $regex.test(value)) {
			showContinueBtn("start-word-relationship-activity");
		} else {
			hideContinueBtn();
		}
	});
}

function startWordRelationshipActivity() {
	beginTimeStarted();
	giveDirections("How are the two words above connected or related?");

	getAnotherFreestyleWord().done(function(secondWord) {
		var $span = createElem("span")
								.attr("data-rel-word-id", secondWord.id)
								.append("+ " + secondWord.name);
		$(".target-word-header-div").append($span);
		const $textarea = createTextarea();
		$activityDiv.append($textarea);
		$textarea.attr("placeholder", "Type in here...").focus();

		$textarea.on("input", function() {
			var value = $(this).val().trim();

			if (value.length > 0 && $regex.test(value)) {
				 showContinueBtn("start-leksi-tale-activity");
			} else {
				hideContinueBtn();
			}
		});
	});
}

function startLeksiTaleActivity() {
	beginTimeStarted();
	giveDirections(
		"Write a very short story, poem, song, etc. that includes the word " +
		"above and two of your other words, which are down below. It can be " +
		"real or fake - be creative and have fun with it!"
	);

	getLeksiTaleWords().done(function(words) {
		$(".target-word-header-div").text(targetWord.name);
		var $textarea = createTextarea().attr("id", "lek-tale-textarea");
		$activityDiv.append($textarea);
		$textarea.attr("placeholder", "Type in here...").focus();
		var names = words.map(function(word) { return word.name });
		var $h5 = createElem("h5", "mt-3 mb-3");
		var $bookIcon = createElem("i", "fa fa-book");
		var $directions = createElem("small", "text-muted")
											.append(" Click any word to see more info.");
		var $links = createElem("div", null, "lek-tale-words");
		$h5.append($bookIcon, " Words", $directions);
		$activityDiv.append($h5, $links);

		$.each(words, function() {
			word = this;
			var $link = $("<a>", {
				"data-remote": "true",
				href: "/words/" + word.id
			});
			var $span = createElem("span", "badge badge-pill badge-default")
									.attr("data-word-id", word.id)
									.append(word.name);
		  $link.append($span);
			$links.append($link);
		});

		$("#activity-div").on("input", "#lek-tale-textarea", function() {
			var value = $(this).val().trim();
			var textareaWords = $.unique(value.split(" "));
			highlightUsedWords(textareaWords, names);

			if (wordsLimitReached(textareaWords, names) && $regex.test(value)) {
				 showContinueBtn("start-describe-me-activity");
			} else {
				hideContinueBtn();
			}
		});

		$(".container").on("click", ".badge-default", function() {
			$badge = $(this);
			deactivateBadges();
			activateBadge($badge);
		});
	});
}

function startDescribeMeActivity() {
	beginTimeStarted();

	getDescribeMeText().done(function(describeMe) {
		giveDirections(describeMe.text);
		const $textarea = createTextarea();
		$activityDiv.append($textarea);
		$activityDiv.attr("data-desc-me-id", describeMe.id);
		$textarea.attr("placeholder", "Type in here...").focus();

		$textarea.on("input", function() {
			var value = $(this).val().trim();

			if (value.length > 0 && $regex.test(value)) {
				 showContinueBtn("start-review-activity");
			} else {
				hideContinueBtn();
			}
		});
	});
}

function startInMyLifeActivity() {
	beginTimeStarted();
	const $wordsPartial = $("<%= j render(partial: 'games/freestyle/in_my_life') %>");
	$activityDiv.append($wordsPartial);
	giveDirections("Respond to the prompt below.");
	const $textarea = $("#in_my_life").focus();

	$textarea.on("input", function() {
		var value = $(this).val().trim();
		var numWords = value.split(" ").length;

		if (numWords > 6) {
			showContinueBtn("start-review-in-my-life-activity");
		} else {
			hideContinueBtn();
		}
	});
}

function startReviewActivity() {
	clearTimeout(timerID);
	const $reviewPartial = $("<%= j render(partial: 'games/review', locals: { game: 'Freestyle', word_name: @target_word.name }) %>");
	const $teacherReviewPartial = $("<%= j render(partial: 'games/freestyle/teacher_review', locals: { uw: @user_word }) %>");
	$(".container").empty().append($reviewPartial, $teacherReviewPartial);
}

/***********************
		HELPER FUNCTIONS
************************/

function emptyActivityDiv() {
	debugger;
	$activityDiv.empty();
}

function beginTimeStarted() {
	timeStarted = getDate();
}

function getDate() {
	return new Date();
}

function saveInMyLifeResponse(timeStarted) {
	var input = $activityDiv.find("textarea").val().trim();
	var data = { "input": input };
	createFreestyle("in_my_life", timeStarted, data);
}

function saveDescMeResponse(timeStarted) {
	var input = $activityDiv.find("textarea").val().trim();
	var describeMeID = $activityDiv.data("desc-me-id");
	var data = {
		"desc_me_id": describeMeID,
		"input": input
	};
	createFreestyle("describe_me", timeStarted, data);
}

function saveLeksiTaleResponse(timeStarted) {
	var input = $activityDiv.find("textarea").val().trim();
	var wordIDs = [];
	var selectedWordIDs = $.each($(".badge-success"), function() {
    wordIDs.push($(this).data("word-id"));
	});
	var data = {
		"word_ids": wordIDs,
		"input": input
	};
	createFreestyle("leksi_tale", timeStarted, data);
}

function saveWordRelResponse(timeStarted) {
	var input = $activityDiv.find("textarea").val().trim();
	var relatedWordID = $(".container .bg-faded")
											.find("span")
											.data("rel-word-id");
	var data = {
		"rel_word_id": relatedWordID,
		"input": input
	};
	createFreestyle("word_rel", timeStarted, data);
}

function saveSentStemResponse(timeStarted) {
	var data = {};

	$.each($("h4"), function() {
    var sentStemID = $(this).data("sent-stem-id");
    var input = $(this).next().find("textarea").val();
		data[sentStemID] = input;
	});

	createFreestyle("sent_stem", timeStarted, data);
}

function createFreestyle(route, timeStarted, uniqData) {
	uniqData = uniqData || null;
	var url = "/freestyle/" + route;
	var data = {
		"word_id": targetWord.id,
		"time_started": timeStarted,
		"time_ended": getDate(),
		"uniq_data": uniqData
	}
	makeAjaxCall("POST", url, data);
}

function updateUserWordGamesCompleted(gamesCompleted) {
	var data = { "word_id": targetWord.id, "games_completed": gamesCompleted };
	makeAjaxCall("PATCH", "/user_word", data);
};

function makeAjaxCall(type, url, data) {
	$.ajax({
		type: type,
		url: url,
		dataType: "json",
		data: data
	}).done(logResponse);
}

function logResponse(response) {
	console.log(response);
}

function activateBadge($badge) {
	$badge.removeClass("badge-default").addClass("badge-primary");
}

function deactivateBadges() {
	$(".badge-primary").removeClass("badge-primary")
										 .addClass("badge-default");
}

function highlightUsedWords(textareaWords, names) {
	var words = usedWords(textareaWords, names);
	$(".badge-success").removeClass("badge-success").addClass("badge-default");

	if (words.length) {
		$.each(words, function() {
			var usedWord = this;
			var $badge = $(".badge-default").filter(function() {
				return $(this).text().trim() == usedWord;
			});
			$badge.removeClass("badge-default").addClass("badge-success");
		});
	}
}

function wordsLimitReached(textareaWords, names) {
	var words = usedWords(textareaWords, names);
	return isTargetWordUsed(words) && words.length > 2;
}

function isTargetWordUsed(words) {
	return $.inArray(targetWord.name, words) != -1;
}

function usedWords(textareaWords, names) {
	var unusedNames = names.notIn(textareaWords);
	return names.notIn(unusedNames);
}

Array.prototype.notIn = function(otherArray) {
	return $(this).not(otherArray).get();
};

function addPoints(points) {
	newPointsTotal += points;
	$points.html(newPointsTotal);
};

function removePoints(points) {
	if (newPointsTotal > 0) {
		newPointsTotal -= points;
		$points.html(newPointsTotal);
	}
};

function flashPointsUpdate($arrow) {
	$arrow.css("opacity", "1");

	setTimeout(function() {
		$arrow.css("opacity", "0.1");
	}, 300);
}

function getArrowSuccess() {
	return $(".fa-arrow-up.text-success");
}

function getArrowDanger() {
	return $(".fa-arrow-down.text-danger");
}

function updateProgress(value) {
	var $progressBar = $(".progress-bar");
	$progressBar.attr("aria-valuenow", value)
							.attr("style", "width: " + value + "%;");
};

function startCountup($section, seconds) {
	return setInterval(function() {
		seconds++;
		$section.html(seconds);
	}, 1000);
}

function getNextGame() {
	return getData("/games/next");
}

function getDescribeMeText() {
	return getData("/games/describe_mes?word_id=" + targetWord.id);
}

function getLeksiTaleWords() {
	return getData("/my_leksi/words?word_id=" + targetWord.id);
}

function getAnotherFreestyleWord() {
	return getData("/games/word_relationships?word_id=" + targetWord.id);
}

function getData(path) {
	return $.get(path, function() {}, "json");
}

function showContinueBtn(_class) {
	if (!$(".fixed-bottom").length) {
		var $infoIcon = createElem("i", "fa fa-info-circle");
		var msg = " Your teacher will see your response and may provide feedback.";
		var $contBtn = createBtn(
			"btn-primary btn-block btn-lg continue-btn " + _class, "Continue"
		);
		$(".container").append(
			createElem("div", "fixed-bottom mb-0").append(
				createElem("p", "text-muted text-center").append($infoIcon, msg),
				$contBtn
			)
		);
	}
}

function hideContinueBtn() {
	debugger;
	$(".fixed-bottom").remove();
}

function giveDirections(directions) {
	$(".game-directions").html(directions);
};

function createTextarea() {
	return createElem("textarea", "form-control");
}

function createBtn(_class, text) {
	return createElem("button", "btn " + _class).text(text.trim());
}

function createElem(elem, elemClass, elemID) {
	_class = elemClass || null;
	_id = elemID || null;
	return $("<" + elem + ">", { class: _class, id: _id });
}

const $scoreboardPartial = $("<%= j render(partial: 'games/scoreboard') %>");
const $headerPartial = $("<%= j render(partial: 'games/fundamentals/header', locals: { target_word: @target_word }) %>");
var targetWord = JSON.parse("<%= j @target_word.to_json.html_safe %>");
var availableGames = JSON.parse("<%= j @available_games.to_json.html_safe %>");
var gameToPlay = parseInt("<%= @game_to_play %>");
var $fundamentalsDiv = createElem("div", null, "fundamentals-div");
var $activityDiv = createElem("div", null, "activity-div");
$fundamentalsDiv.append(
									$scoreboardPartial,
									$headerPartial,
									$activityDiv
								);
$(".container").empty()
							 .append($fundamentalsDiv)
							 .css("margin-bottom", "5rem")
							 .hide()
							 .fadeIn();
var $targetWordH1 = $(".target-word-header");
var newPointsTotal = 0;
var $points = $(".scoreboard-points");
var $scoreboardTimer = $(".scoreboard-timer");
var scoreboardTimerID = startCountup($scoreboardTimer, 0);
var timeGameStarted;
var numBadClicks = 0;
var numHeard = 0;
var $regex = /^[a-zA-Z. ]+$/;

switch (gameToPlay) {
	case 1:
		startSpellByTypingActivity();
		updateProgress(10);
		break;
	case 2:
		startSpellByClickingLettersActiivty();
		updateProgress(17);
		break;
	case 3:
		if (availableGames.pronun) {
			updateProgress(34);
			startPronunciationActivity();
		} else if (availableGames.dec_dec) {
			updateUserWordGamesCompleted(3);
			updateProgress(51);
			startDecisionsDecisionsActivity();
		} else if (availableGames.ex_non_ex) {
			updateUserWordGamesCompleted(4);
			updateProgress(68);
			startExampleNonExamplesActivity();
		} else if (availableGames.syns_vs_ants) {
			updateUserWordGamesCompleted(5);
			updateProgress(85);
			startSynsVsAntsActivity();
		} else {
			updateUserWordGamesCompleted(6);
			updateProgress(100);
			startReviewActivity();
		}

		break;
	case 4:
		if (availableGames.dec_dec) {
			updateProgress(51);
			startDecisionsDecisionsActivity();
		} else if (availableGames.ex_non_ex) {
			updateUserWordGamesCompleted(4);
			updateProgress(68);
			startExampleNonExamplesActivity();
		} else if (availableGames.syns_vs_ants) {
			updateUserWordGamesCompleted(5);
			updateProgress(85);
			startSynsVsAntsActivity();
		} else {
			updateUserWordGamesCompleted(6);
			updateProgress(100);
			startReviewActivity();
		}

		break;
	case 5:
		if (availableGames.ex_non_ex) {
			updateProgress(68);
			startExampleNonExamplesActivity();
		} else if (availableGames.syns_vs_ants) {
			updateUserWordGamesCompleted(5);
			updateProgress(85);
			startSynsVsAntsActivity();
		} else {
			updateUserWordGamesCompleted(6);
			updateProgress(100);
			startReviewActivity();
		}

		break;
	case 6:
		if (availableGames.syns_vs_ants) {
			updateProgress(85);
			startSynsVsAntsActivity();
		} else {
			updateUserWordGamesCompleted(6);
			updateProgress(100);
			startReviewActivity();
		}

		break;
	default: startSpellByTypingActivity();
}

$(".container").off().on("click", ".continue-btn", function() {
	var $btn = $(this);
	var dataOne = {
		"num_typed": $(".spell-the-word.form-control-success").length
	};
	var dataTwo = {
		"num_bad_clicks": numBadClicks
	};
	var dataThree = {
		"num_heard": numHeard
	};

	if ($btn.hasClass("start-spell-by-clicking-activity")) {
		updateUserWordGamesCompleted(1);
		updateProgress(17);
		addPoints(100);
		updateUserPoints(100);
		updateGameStat("funds_one", timeGameStarted, dataOne);
		flashPointsUpdate(arrowSuccess());
		emptyActivityDiv();
		startSpellByClickingLettersActiivty();
	} else if ($btn.hasClass("start-pronunciation-activity")) {
		if (availableGames.pronun) {
			updateUserWordGamesCompleted(2);
			updateProgress(34);
			updateUserPoints(250);
			updateGameStat("funds_two", timeGameStarted, dataTwo);
			addPoints(150);
			flashPointsUpdate(arrowSuccess());
			emptyActivityDiv();
			startPronunciationActivity();
		} else if (availableGames.dec_dec) {
			updateUserWordGamesCompleted(3);
			updateProgress(51);
			emptyActivityDiv();
			startDecisionsDecisionsActivity();
		} else if (availableGames.ex_non_ex) {
			updateUserWordGamesCompleted(4);
			updateProgress(68);
			emptyActivityDiv();
			startExampleNonExamplesActivity();
		} else if (availableGames.syns_vs_ants) {
			updateUserWordGamesCompleted(5);
			updateProgress(85);
			startSynsVsAntsActivity();
		} else {
			updateUserWordGamesCompleted(6);
			updateProgress(100);
			startReviewActivity();
		}
	} else if ($btn.hasClass("start-decisions-decisions-activity")) {
		addPoints(200);
		updateUserPoints(200);
		updateGameStat("funds_three", timeGameStarted, dataThree);
		flashPointsUpdate(arrowSuccess());
		$targetWordH1.html(targetWord.name).removeClass("text-success");
		emptyActivityDiv();

		if (availableGames.dec_dec) {
			updateUserWordGamesCompleted(3);
			updateProgress(51);
			startDecisionsDecisionsActivity();
		} else if (availableGames.ex_non_ex) {
			updateUserWordGamesCompleted(4);
			updateProgress(68);
			startExampleNonExamplesActivity();
		} else if (availableGames.syns_vs_ants) {
			updateUserWordGamesCompleted(5);
			updateProgress(85);
			startSynsVsAntsActivity();
		} else {
			updateUserWordGamesCompleted(6);
			updateProgress(100);
			startReviewActivity();
		}
	} else if ($btn.hasClass("start-ex-non-exs-activity")) {
		addPoints(325);
		updateUserPoints(325);
		flashPointsUpdate(arrowSuccess());
		emptyActivityDiv();

		if (availableGames.ex_non_ex) {
			updateUserWordGamesCompleted(4);
			updateProgress(68);
			startExampleNonExamplesActivity();
		} else if (availableGames.syns_vs_ants) {
			updateUserWordGamesCompleted(5);
			updateProgress(85);
			startSynsVsAntsActivity();
		} else {
			updateUserWordGamesCompleted(6);
			updateProgress(100);
			startReviewActivity();
		}
	} else if ($btn.hasClass("start-syns-vs-ant-activity")) {
		updateUserWordGamesCompleted(5);
		addPoints(500);
		updateUserPoints(500);
		flashPointsUpdate(arrowSuccess());
		emptyActivityDiv();

		if (availableGames.syns_vs_ants) {
			updateUserWordGamesCompleted(5);
			updateProgress(85);
			startSynsVsAntsActivity();
		} else {
			updateUserWordGamesCompleted(6);
			updateProgress(100);
			startReviewActivity();
		}
	} else if ($btn.hasClass("review-activity")) {
		updateUserWordGamesCompleted(6);
		updateProgress(100);
		addPoints(1000);
		updateUserPoints(1000);
		flashPointsUpdate(arrowSuccess());
		emptyActivityDiv();
		startReviewActivity();
	}

	$btn.parent().remove();
});

/***********************
	 ACTIVITY FUNCTIONS
************************/

function startSpellByTypingActivity() {
	timeGameStarted = getDate();
	var $spellingSpeedsterPartial = $("<%= j render(partial: 'games/fundamentals/spelling_speedster', locals: { rows: @rows }) %>");
	$activityDiv.append($spellingSpeedsterPartial);
	giveDirections(
		"Type the word above. Earn more Linero each time you spell it."
	);
	var wordLetterSpan;
	var targetWordSpanLetters = [];

	$.each(targetWord.name.split(""), function() {
		wordLetterSpan = $(createElem("span")).append(this);
		targetWordSpanLetters.push(wordLetterSpan);
	})

	$targetWordH1.html(targetWordSpanLetters);

	var $firstInput;
	var firstInputText;
	var wordSubstring;
	var numLettersTyped = 0;
	var successLetters = 0;
	var timeStartedTyping;
	var numInputs = 0;

	$("#activity-div").off().on("input", ".spell-the-word", function() {
		timeStartedTyping = timeStartedTyping || $scoreboardTimer.text();
		$firstInput = $(".spell-the-word:first");
		firstInputText = $(this).val().trim().toLowerCase();
		numLettersTyped = firstInputText.length;
		wordSubstring = targetWord.name.substring(0, numLettersTyped);

		if (firstInputText == wordSubstring) {
			makeLettersGreen($targetWordH1, numLettersTyped);
			successLetters = $targetWordH1.find("span.text-success").length;

			if (successLetters != numLettersTyped) {
				makeLettersDefault($targetWordH1);
				makeLettersGreen($targetWordH1, numLettersTyped);
			}
		}

		if (firstInputText == targetWord.name) {
			var $spellingSpeedsterInputPartial = $("<%= j render(partial: 'games/fundamentals/spelling_speedster', locals: { rows: @rows }) %>");
			numInputs = $(".spell-the-word.form-control-success").length + 1;
			$firstInput.parent()
								 .addClass("has-success")
								 .append(
								   createFormText(
									   "(" + numInputs + ") typed in "
										 + timeDiff(timeStartedTyping)
										 + " secs"
								   )
							   );
			timeStartedTyping = null;
			$firstInput.addClass("form-control-success")
								 .prop("disabled", true);
			addPoints(50);
			flashPointsUpdate(arrowSuccess());
			showContinueBtn("start-spell-by-clicking-activity");
			createInputGroup().prependTo($activityDiv);
			// $spellingSpeedsterInputPartial.prependTo($activityDiv);
			$firstInput = $(".spell-the-word:first").focus();
		}
	});
};

function startSpellByClickingLettersActiivty() {
	timeGameStarted = getDate();
	giveDirections("Tap the letters to spell that same word.");
	var $letter;
	var targetWordLetters = targetWord.name
																		.split('')
																		.filter(function(v) { return v !== ' '} );
	var $tappedLetterBtn;
	var tappedLetter;
	var firstLetter;
	var underscores = "";
	var $underscoreContainer = createElem("span", null, null);
	var $alphabets = "abcdefghijklmnopqrstuvwxyz".split("");
	var	$randomAlphabet;
	var $alphabetRandLetters = [];
	var $mergedLettersArray = [];

	makeLettersDefault($targetWordH1);
	$targetWordH1.html($underscoreContainer);

	$.each(targetWordLetters, function() {
		underscores += "_ ";
	});

	$underscoreContainer.text(underscores);

	for (var i = 0; i < 3; i++) {
		$randomAlphabet = $alphabets[randNumInRange(0, 26)];
		$alphabetRandLetters.push($randomAlphabet);
	}

	$mergedLettersArray = merge(targetWordLetters, $alphabetRandLetters);
	$mergedLettersArray = shuffleArray($mergedLettersArray);

	$.each($mergedLettersArray, function(index, letter) {
		$letter = createBtn(
			"btn-lg btn-outline-primary fitb-letter letter_" + letter,
			letter
		);
		$activityDiv.append($letter);
	});

	$(".fitb-letter").click(function() {
		$tappedLetterBtn = $(this);
		tappedLetter = $(this).text();

		for (var i = 0; i < targetWordLetters.length; i++) {
			firstLetter = targetWordLetters[0];
		}

		if (firstLetter == tappedLetter) {
			$tappedLetterBtn.removeClass("btn-outline-primary")
											.addClass("btn-success");
			$tappedLetterBtn.prop("disabled", true);
			underscores = underscores.replace(/_ /, tappedLetter);
			$underscoreContainer.text(underscores);
			targetWordLetters.shift();
			addPoints(1);
			flashPointsUpdate(arrowSuccess());
		} else {
			numBadClicks += 1;
			removePoints(1);
			flashPointsUpdate(arrowDanger());
			$tappedLetterBtn.removeClass("animated shake")
											.addClass("animated shake");
		}

		if (targetWordLetters.length == 0) {
			$underscoreContainer.addClass("text-success");
			$(".fitb-letter").prop("disabled", true);
			$("#fill-in-the-blank-continue-btn").fadeIn();
			showContinueBtn("start-pronunciation-activity")
		}
	});
};

function startPronunciationActivity() {
	timeGameStarted = getDate();
	var numSyllables = targetWord.phonetic_spelling.split("·").length;
	giveDirections(
		"This word has " + numSyllables + " syllable(s). Click " +
		"the volume button to hear its pronunciation."
	);
	const $sayItRightPartial = $("<%= j render(partial: 'games/fundamentals/say_it_right') %>");
	$activityDiv.append($sayItRightPartial);
	const $audioBtn = $(".funds-audio-btn");
	var attr = $(".audiooo").attr("src") + targetWord.name + ".mp3";
	$targetWordH1.html(targetWord.phonetic_spelling);
	$(".audiooo").attr("src", attr);

	$audioBtn.click(function() {
		var audio = $(this).parent().prev()[0];
		audio.play();
		$volumeBtn = $(this);
		$volumeBtn.addClass("text-success")
						  .removeClass("fa-volume-off")
						  .addClass("fa-volume-up");

		setTimeout(function() {
			$volumeBtn.removeClass("text-success")
						 	 .removeClass("fa-volume-up")
					 		 .addClass("fa-volume-off");
		}, 500);

		$targetWordH1.addClass("text-success");
		addPoints(1);
		flashPointsUpdate(arrowSuccess());
		numHeard += 1;
		showContinueBtn("start-decisions-decisions-activity");
	});
};

function startDecisionsDecisionsActivity() {
	timeGameStarted = getDate();
	giveDirections("Decide which of the statements below makes more sense.");
	var meaningAltArray = [];

	getMeaningAlts(targetWord.id).done(function(response) {
		meaningAltArray = response;

		$.each(meaningAltArray, function(index) {
			$activityDiv.append(createMeaningAltQues(this, index));
		})
	});

	$("#activity-div").off().on("click", ".mean-alts-answer", function() {
		$selAnswer = $(this);
		$selAnswerText = $selAnswer.text().trim();
		$selAnswerCard = $selAnswer.parents(".card");
		$selAnswerBlock = $selAnswerCard.find(".card-body");
		$selAnswerTitle = $selAnswerCard.find(".card-title");
		$btnRow = $selAnswer.parent().parent();
		index = $btnRow.data("index");
		var meaningAlt = meaningAltArray[index];
		answer = meaningAlt.answer.trim();
		$feedbackCardText = $btnRow.siblings(".mean-alts-feedback");
		createElem("div", "clear").insertAfter($selAnswerTitle);

		if ($selAnswerText == answer) {
			$selAnswerCard.addClass("card-outline-success");
			$selAnswerBlock.find(".float-right")
										 .append(createFontAweIcon("check fa-2x text-success"));
			$btnRow.find(".mean-alts-answer").prop("disabled", true)
																			 .removeClass("btn-outline-primary")
																			 .addClass("btn-outline-secondary");
			$feedbackCardText.prepend("<br>")
											 .addClass("text-success")
											 .removeClass("d-none");
			$feedbackCardText.find("strong").prepend("Correct! ");
			addPoints(30);
			var data = {
				"meaning_alt_id": meaningAlt.id,
				"result": true
			};
			updateGameStat("funds_four", timeGameStarted, data);
		} else {
			$selAnswerCard.addClass("card-outline-danger");
			$selAnswerBlock.find(".float-right")
										 .append(createFontAweIcon("close fa-2x text-danger"));
			$btnRow.find(".mean-alts-answer").prop("disabled", true)
																			 .removeClass("btn-outline-primary")
																			 .addClass("btn-outline-secondary");
			$feedbackCardText.prepend("<br>")
											 .addClass("text-danger")
											 .removeClass("d-none");
			$feedbackCardText.find("strong").prepend("Incorrect. ");
			removePoints(20);
			var data = {
				"meaning_alt_id": meaningAlt.id,
				"result": false
			};
			updateGameStat("funds_four", timeGameStarted, data);
		}

		var numBtns = $("#meaning-alts-div .btn").length;
		var numBtnsDisabled = $("#meaning-alts-div .btn:disabled").length;

		if (numBtns == numBtnsDisabled) {
			showContinueBtn("start-ex-non-exs-activity");
		}
	});
};

function startExampleNonExamplesActivity() {
	timeGameStarted = getDate();
	giveDirections(
		"Decide if the statements below are an example or non-example of " +
		"the word above."
	);
	var exNonExArray = [];

	getExampleNonExamples(targetWord.id).done(function(response) {
		exNonExArray = response;

		$.each(exNonExArray, function(index) {
			$activityDiv.append(createExNonExQues(this, index));
		});
	});

	$("#activity-div").off().on("click", ".ex-non-exs-answer", function() {
		$selAnswer = $(this);
		$selAnswerText = $selAnswer.text().trim();
		$selAnswerCard = $selAnswer.parents(".card");
		$selAnswerBlock = $selAnswerCard.find(".card-body");
		$selAnswerTitle = $selAnswerCard.find(".card-title");
		$btnRow = $selAnswer.parent().parent();
		index = $btnRow.data("index");
		exNonEx = exNonExArray[index];
		answer = exNonEx.answer.trim();
		$feedbackCardText = $btnRow.siblings(".ex-non-exs-feedback");
		createElem("div", "clear").insertAfter($selAnswerTitle);

		if ($selAnswerText == answer) {
			$selAnswerCard.addClass("card-outline-success");
			$selAnswerBlock.find(".float-right")
										 .append(createFontAweIcon("check fa-2x text-success"));
			$btnRow.find(".ex-non-exs-answer").prop("disabled", true)
																				.removeClass("btn-outline-primary")
																				.addClass("btn-outline-secondary");
			$feedbackCardText.prepend("<br>")
											 .addClass("text-success")
											 .removeClass("d-none");
			$feedbackCardText.find("strong").prepend("Correct! ");
			addPoints(1);
			var data = {
				"ex_non_ex_id": exNonEx.id,
				"result": true
			};
			updateGameStat("funds_five", timeGameStarted, data);
		} else {
			$selAnswerCard.addClass("card-outline-danger");
			$selAnswerBlock.find(".float-right")
										 .append(createFontAweIcon("close fa-2x text-danger"));
			$btnRow.find(".ex-non-exs-answer").prop("disabled", true)
																				.removeClass("btn-outline-primary")
																				.addClass("btn-outline-secondary");
			$feedbackCardText.prepend("<br>")
											 .addClass("text-danger")
											 .removeClass("d-none");
			$feedbackCardText.find("strong").prepend("Incorrect. ");
			removePoints(1);
			var data = {
				"ex_non_ex_id": exNonEx.id,
				"result": false
			};
			updateGameStat("funds_five", timeGameStarted, data);
		}

		var numBtns = $activityDiv.find(".btn").length;
		var numBtnsDisabled = $activityDiv.find(".btn:disabled").length;

		if (numBtns == numBtnsDisabled) {
			showContinueBtn("start-syns-vs-ant-activity");
			// show an emoji pointing down and when clicked, scrollToBottom();
		}
	});
}

// TODO Include three or four dummy words and a "neither/not applicable" button
function startSynsVsAntsActivity() {
	giveDirections("Match the synonym and antonym pairs for the word above.");
	var $selectedBtn;
	var $selectedBtns;
	var twoBtnsAreSelected = false;
	var btnsAreTheSame = false;
	var gameCompleted = false;
	var matchIsFound = false;
	var matches = [];

	getThesaurus(targetWord.name).done(function(response) {
		const synonyms = response[0];
		const antonyms = response[1];

		matches = shuffleArray(merge(
			createMatchObjects(synonyms, "synonym"),
			createMatchObjects(antonyms, "antonym")
		));
		$activityDiv.empty().append(createMatchingCards(matches));
	});

	$("#activity-div").off().on("click", ".match", function() {
		$selectedBtn = $(this);
		$selectedBtn.addClass("selected");
		$selectedBtns = $(".selected");
		numSelected = $selectedBtns.length;
		twoBtnsAreSelected = numSelected > 1;

		if (twoBtnsAreSelected) {
			$firstBtn = $($selectedBtns[0]);
			$secondBtn = $($selectedBtns[1]);
			btnsAreTheSame = $firstBtn.text() == $secondBtn.text();

			if (btnsAreTheSame) {
				$selectedBtns.removeClass("btn-primary btn-outline-primary selected")
										 .addClass("btn-outline-primary");
			}

			if ($firstBtn.text() == "synonym" || $secondBtn.text() == "synonym") {
				var $wordBtn = findBtnNot($selectedBtns, "synonym");
				matchIsFound = findMatch(matches, $wordBtn, "synonym").length;
			} else {
				var $wordBtn = findBtnNot($selectedBtns, "antonym");
				matchIsFound = findMatch(matches, $wordBtn, "antonym").length;
			}

			if (matchIsFound) {
				$selectedBtns.removeClass("btn-primary btn-outline-primary selected")
										 .addClass("btn-success")
										 .prop("disabled", true);
				addPoints(30);
				flashPointsUpdate(arrowSuccess());
				var data = {
					"category": $selectedBtns.not($wordBtn).text(),
					"word_name": $wordBtn.text(),
					"result": true
				};
				updateGameStat("funds_six", timeGameStarted, data);
				gameCompleted = $(".match.btn-success").length == matches.length * 2;

				if (gameCompleted) {
					showContinueBtn("review-activity");
					$("#syn-vs-ant-cont-btn").fadeIn();
				}
			} else {
				$selectedBtns.removeClass("btn-primary btn-outline-primary selected")
										 .addClass("btn-outline-primary");
				removePoints(10);
				flashPointsUpdate(arrowDanger());
				var wordName = $wordBtn.text() || "n/a";

				if (wordName == "n/a") {
					var category = $firstBtn.text();
				} else {
					var category = $selectedBtns.not($wordBtn).text();
				}

				var data = {
					"category": category,
					"word_name": wordName,
					"result": false
				};
				updateGameStat("funds_six", timeGameStarted, data);
			}
		} else {
			if ($selectedBtn.hasClass("btn-primary")) {
				$selectedBtn.removeClass("btn-primary selected")
										.addClass("btn-outline-primary");
			} else {
				$selectedBtn.removeClass("btn-outline-primary")
										.addClass("btn-primary");
			}
		}
	});
};

function startReviewActivity() {
	clearTimeout(scoreboardTimerID);
	const $reviewPartial = $("<%= j render(partial: 'games/review', locals: { game: 'Fundamentals', word_name: @target_word.name }) %>");
	$(".container").empty().append($reviewPartial);
};

/***********************
		HELPER FUNCTIONS
************************/

function emptyActivityDiv() {
	$activityDiv.empty();
}

function getDate() {
	return new Date();
}

function findBtnNot($btns, type) {
	return $btns.filter(function() {
		return $(this).text() != type;
	});
}

function findMatch(matches, $btn, type) {
	return matches.filter(function(match) {
		return isMatch(match, $btn, type);
	});
}

function isMatch(match, $btn, type) {
	return match.word == $btn.text() && match.type == type;
}

function createMatchObjects(words, type) {
	matches = [];

	$.each(words, function(index, word) {
		match = new Object();
		match.id = index;
		match.word = word;
		match.type = type;
		matches.push(match);
	});

	return matches;
}

function createMatchingCards(matches) {
	var $row = createElem("div", "row text-center");
	var $typeBtn;
	var $wordBtn;
	var $typeColSmallThree;
	var $wordColSmallThree;

	$.each(matches, function(index, match) {
		$wordColSmallThree = createElem("div", "col-sm-4 mb-3");
		$typeColSmallThree = createElem("div", "col-sm-4 mb-3");
		$wordBtn = createBtn(
			"btn-outline-primary btn-lg btn-block match", match.word
		)
		$typeBtn = createBtn(
			"btn-outline-primary btn-lg btn-block match", match.type
		);
		$typeColSmallThree.append($typeBtn);
		$wordColSmallThree.append($wordBtn);
		$row.append($wordColSmallThree).append($typeColSmallThree);
	});

	return $row;
}

function updateGameStat(route, timeStarted, uniqData) {
	uniqData = uniqData || null;
	var url = "/game_stat/" + route;
	var data = {
		"word_id": targetWord.id,
		"time_started": timeStarted,
		"time_ended": getDate(),
		"uniq_data": uniqData
	}
	makeAjaxCall("POST", url, data);
}

function updateUserPoints(linero) {
	var url = "/user_points";
	var data = { "points": linero };
	makeAjaxCall("PATCH", url, data);
};

function updateUserWordGamesCompleted(gamesCompleted) {
	var url = "/user_word";
	var data = { "word_id": targetWord.id, "games_completed": gamesCompleted };
	makeAjaxCall("PATCH", url, data);
};

function makeAjaxCall(type, url, data) {
	$.ajax({
		type: type,
		url: url,
		dataType: "json",
		data: data
	}).done(logResponse);
}

function logResponse(response) {
	console.log(response);
}

function getThesaurus() {
	return getData("/thesaurus/" + targetWord.name);
};

function getExampleNonExamples(wordID) {
	return getData("/words/" + wordID + "/example_non_examples");
};

function getMeaningAlts(wordID) {
	return getData("/words/" + wordID + "/meaning_alts");
};

function getData(path) {
	return $.get(path, function() {}, "json");
}

function addPoints(points) {
	newPointsTotal += points;
	$points.html(newPointsTotal);
};

function removePoints(points) {
	if (newPointsTotal > 0) {
		newPointsTotal -= points;
		$points.html(newPointsTotal);
	}
};

function arrowSuccess() {
	return $(".fa-arrow-up.text-success");
}

function arrowDanger() {
	return $(".fa-arrow-down.text-danger");
}

function flashPointsUpdate($arrow) {
	$arrow.css("opacity", "1");

	setTimeout(function() {
		$arrow.css("opacity", "0.1");
	}, 300);
}

function makeLettersGreen($section, numLetters) {
	$($section.find("span").splice(0, numLetters)).addClass("text-success");
}

function makeLettersDefault($section) {
	$($section.find("span.text-success")).removeClass("text-success");
}

function timeDiff(timeGameStarted) {
	return $scoreboardTimer.text() - timeGameStarted;
}

function startCountup($section, seconds) {
	return setInterval(function() {
		seconds++;
		$section.html(seconds);
	}, 1000);
}

function updateProgress(value) {
	var $progressBar = $(".progress-bar");
	$progressBar.attr("aria-valuenow", value)
							.attr("style", "width: " + value + "%;");
};

function giveDirections(directions) {
	$(".game-directions").html(directions);
};

function showContinueBtn(_class) {
	if (!$(".fixed-bottom").length) {
		$(".container").append(
			createElem("div", "fixed-bottom mb-0")
			.append(
				createBtn(
					"btn-primary btn-block btn-lg continue-btn " + _class, "Continue"
				)
			)
		);
	}
}

function createBtn(_class, text) {
	return createElem("button", "btn " + _class).text(text.trim());
}

function createExNonExQues(exNonEx, index) {
	$card = createElem("div", "card mb-3");
	$cardBlock = createElem("div", "card-body");
	$cardTitle = createElem("h4", "card-title");
	$rightOrWrongIcon = createElem("div", "float-right");
	$btnsDiv = createElem("div", "row text-center");
	$halfCol1 = createElem("div", "col-sm-6");
	$halfCol2 = createElem("div", "col-sm-6");
	btnOptions = shuffleArray(["example", "non-example"]);
	$btn1 = createBtn(
		"btn-lg btn-outline-primary btn-block ex-non-exs-answer",
		btnOptions[0]
	);
	$btn2 = createBtn(
		"btn-lg btn-outline-primary btn-block ex-non-exs-answer",
		btnOptions[1]
	);
	$feedback = createElem(
		"p", "card-text ex-non-exs-feedback d-none"
	).append(createElem("strong"));
	$card.append($cardBlock);
	$cardBlock.append($cardTitle);
	$cardTitle.append($rightOrWrongIcon);
	$cardTitle.append(exNonEx.text);
	$cardBlock.append($btnsDiv);
	$cardBlock.append($feedback);
	$btnsDiv.attr("data-index", index);
	$btnsDiv.append($halfCol1).append($halfCol2);
	$halfCol1.append($btn1);
	$halfCol2.append($btn2);
	$feedback.find("strong").append(exNonEx.feedback);
	return $card;
}

function createMeaningAltQues(meaningAlt, index) {
	$card = createElem("div", "card mb-3");
	$cardBlock = createElem("div", "card-body");
	$cardTitle = createElem("h4", "card-title");
	$rightOrWrongIcon = createElem("div", "float-right");
	$btnsDiv = createElem("div", "row text-center");
	$halfCol1 = createElem("div", "col-sm-6");
	$halfCol2 = createElem("div", "col-sm-6");
	btnOptions = shuffleArray(meaningAlt.choices.split(","));
	$btn1 = createBtn(
		"btn-lg btn-outline-primary btn-block mean-alts-answer",
		btnOptions[0]
	);
	$btn2 = createBtn(
		"btn-lg btn-outline-primary btn-block mean-alts-answer",
		btnOptions[1]
	);
	$feedback = createElem(
		"p", "card-text mean-alts-feedback d-none"
	).append(createElem("strong"));
	$card.append($cardBlock);
	$cardBlock.append($cardTitle);
	$cardTitle.append($rightOrWrongIcon);
	$cardTitle.append(meaningAlt.text);
	$cardBlock.append($btnsDiv);
	$cardBlock.append($feedback);
	$btnsDiv.attr("data-index", index);
	$btnsDiv.append($halfCol1).append($halfCol2);
	$halfCol1.append($btn1);
	$halfCol2.append($btn2);
	$feedback.find("strong").append(meaningAlt.feedback);
	return $card;
}

function createFormText(text) {
	return createElem("p", "form-text text-muted")
				 .append(createElem("small").text(text));
}

function createInputGroup() {
	return createFormGroup().append(createLabel(), createInput());
}

function createInput() {
	return createElem("input", "form-control input-lg spell-the-word")
				 .attr("type", "text")
				 .attr("autofocus", "true")
				 .attr("placeholder", "Type it again or tap Continue");
}

function createFormGroup() {
	return createElem("div", "form-group");
}

function createLabel() {
	return createElem("label", "form-control-label sr-only")
}

function createFontAweIcon(_class) {
	return createElem("i", "fa fa-" + _class);
}

function createElem(elem, elemClass, elemID) {
	_class = elemClass || null;
	_id = elemID || null;
	return $("<" + elem + ">", { class: _class, id: _id });
}

function randNumInRange(start, end) {
	return Math.floor(Math.random()* (start - end) + end);
};

function shuffleArray(array) {
	var m = array.length, t, i;

	while (m) {
		i = Math.floor(Math.random() * m--);
		t = array[m];
		array[m] = array[i];
		array[i] = t;
	}

	return array;
};

function merge(array1, array2) {
	return $.merge($.merge([], array1), array2);
}
